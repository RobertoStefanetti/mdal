/*
 * generated by Xtext 2.21.0
 */
package de.joneug.mdal.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import de.joneug.mdal.ide.contentassist.antlr.internal.InternalMdalParser;
import de.joneug.mdal.services.MdalGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class MdalParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MdalGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MdalGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup(), "rule__AlExtension__Group__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_3(), "rule__AlExtension__Group_3__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_4(), "rule__AlExtension__Group_4__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_4_2(), "rule__AlExtension__Group_4_2__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_4_2_1(), "rule__AlExtension__Group_4_2_1__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_5(), "rule__AlExtension__Group_5__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_6(), "rule__AlExtension__Group_6__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_7(), "rule__AlExtension__Group_7__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_8(), "rule__AlExtension__Group_8__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_9(), "rule__AlExtension__Group_9__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_10(), "rule__AlExtension__Group_10__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_11(), "rule__AlExtension__Group_11__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_12(), "rule__AlExtension__Group_12__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_13(), "rule__AlExtension__Group_13__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_14(), "rule__AlExtension__Group_14__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_15(), "rule__AlExtension__Group_15__0");
			builder.put(grammarAccess.getAlExtensionAccess().getGroup_16(), "rule__AlExtension__Group_16__0");
			builder.put(grammarAccess.getDocumentAccess().getGroup(), "rule__Document__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
			builder.put(grammarAccess.getFieldAccess().getGroup_3(), "rule__Field__Group_3__0");
			builder.put(grammarAccess.getFieldAccess().getGroup_4(), "rule__Field__Group_4__0");
			builder.put(grammarAccess.getTypeTextAccess().getGroup(), "rule__TypeText__Group__0");
			builder.put(grammarAccess.getTypeTextAccess().getGroup_2(), "rule__TypeText__Group_2__0");
			builder.put(grammarAccess.getIdRangeAccess().getGroup(), "rule__IdRange__Group__0");
			builder.put(grammarAccess.getIdRangeAccess().getGroup_1(), "rule__IdRange__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getAlExtensionsAssignment(), "rule__Model__AlExtensionsAssignment");
			builder.put(grammarAccess.getAlExtensionAccess().getNameAssignment_1(), "rule__AlExtension__NameAssignment_1");
			builder.put(grammarAccess.getAlExtensionAccess().getIdAssignment_3_1(), "rule__AlExtension__IdAssignment_3_1");
			builder.put(grammarAccess.getAlExtensionAccess().getIdRangesAssignment_4_2_0(), "rule__AlExtension__IdRangesAssignment_4_2_0");
			builder.put(grammarAccess.getAlExtensionAccess().getIdRangesAssignment_4_2_1_1(), "rule__AlExtension__IdRangesAssignment_4_2_1_1");
			builder.put(grammarAccess.getAlExtensionAccess().getPlatformAssignment_5_1(), "rule__AlExtension__PlatformAssignment_5_1");
			builder.put(grammarAccess.getAlExtensionAccess().getPublisherAssignment_6_1(), "rule__AlExtension__PublisherAssignment_6_1");
			builder.put(grammarAccess.getAlExtensionAccess().getVersionAssignment_7_1(), "rule__AlExtension__VersionAssignment_7_1");
			builder.put(grammarAccess.getAlExtensionAccess().getBriefAssignment_8_1(), "rule__AlExtension__BriefAssignment_8_1");
			builder.put(grammarAccess.getAlExtensionAccess().getDescriptionAssignment_9_1(), "rule__AlExtension__DescriptionAssignment_9_1");
			builder.put(grammarAccess.getAlExtensionAccess().getPrivacyStatementAssignment_10_1(), "rule__AlExtension__PrivacyStatementAssignment_10_1");
			builder.put(grammarAccess.getAlExtensionAccess().getEulaAssignment_11_1(), "rule__AlExtension__EulaAssignment_11_1");
			builder.put(grammarAccess.getAlExtensionAccess().getHelpAssignment_12_1(), "rule__AlExtension__HelpAssignment_12_1");
			builder.put(grammarAccess.getAlExtensionAccess().getUrlAssignment_13_1(), "rule__AlExtension__UrlAssignment_13_1");
			builder.put(grammarAccess.getAlExtensionAccess().getContextSensitiveHelpUrlAssignment_14_1(), "rule__AlExtension__ContextSensitiveHelpUrlAssignment_14_1");
			builder.put(grammarAccess.getAlExtensionAccess().getShowMyCodeAssignment_15_1(), "rule__AlExtension__ShowMyCodeAssignment_15_1");
			builder.put(grammarAccess.getAlExtensionAccess().getRuntimeAssignment_16_1(), "rule__AlExtension__RuntimeAssignment_16_1");
			builder.put(grammarAccess.getDocumentAccess().getNameAssignment_1(), "rule__Document__NameAssignment_1");
			builder.put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
			builder.put(grammarAccess.getFieldAccess().getNoAssignment_3_1(), "rule__Field__NoAssignment_3_1");
			builder.put(grammarAccess.getFieldAccess().getDescriptionAssignment_4_1(), "rule__Field__DescriptionAssignment_4_1");
			builder.put(grammarAccess.getFieldAccess().getTypeAssignment_6(), "rule__Field__TypeAssignment_6");
			builder.put(grammarAccess.getTypeTextAccess().getLengthAssignment_2_1(), "rule__TypeText__LengthAssignment_2_1");
			builder.put(grammarAccess.getIdRangeAccess().getMinAssignment_0(), "rule__IdRange__MinAssignment_0");
			builder.put(grammarAccess.getIdRangeAccess().getMaxAssignment_1_1(), "rule__IdRange__MaxAssignment_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MdalGrammarAccess grammarAccess;

	@Override
	protected InternalMdalParser createParser() {
		InternalMdalParser result = new InternalMdalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MdalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MdalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
